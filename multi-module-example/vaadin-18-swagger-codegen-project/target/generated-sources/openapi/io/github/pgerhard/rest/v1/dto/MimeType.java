/*
 * Missing Cyberroom REST V1 DTO
 * Open API compliant schema definition
 *
 * OpenAPI spec version: 2020.12 - Version 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.github.pgerhard.rest.v1.dto;

import java.util.Objects;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The MIME type of the resource. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for list of common types
 */
@JsonAdapter(MimeType.Adapter.class)
public enum MimeType {
  
  TEXT_PLAIN("text/plain"),
  
  IMAGE_PNG("image/png"),
  
  IMAGE_JPEG("image/jpeg");

  private String value;

  MimeType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MimeType fromValue(String text) {
    for (MimeType b : MimeType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<MimeType> {
    @Override
    public void write(final JsonWriter jsonWriter, final MimeType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MimeType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MimeType.fromValue(String.valueOf(value));
    }
  }
}

